function foxTarget = computeFoxTarget(rabbitPos, foxPos, NW, SW)  Y = 2; % index of y coordinate in the vectos  X = 1; % index of x coordinate in the vectors    foxTarget = rabbitPos;    % The case when both in the same zone  if foxPos(Y) > NW(Y) && rabbitPos(Y) > NW(Y) ... % Both north       || foxPos(X) < NW(X) && rabbitPos(X) < NW(X) ... % Both west      || foxPos(Y) < SW(Y) && rabbitPos(Y) < SW(Y) % Both south    return;  end  intersectsSouth = false;  intersectsWest = false;    % Account for this case seperately to prevent division by zero  % when calculating the gradient  if rabbitPos(X) == foxPos(X)    intersectsSouth = true;  else    % The gradient and intercept of the line between the fox and rabbit    gradient = (rabbitPos(Y) - foxPos(Y)) / (rabbitPos(X) - foxPos(X));    yIntercept = foxPos(Y) - gradient * foxPos(X);    % Whether this line intersects the east or south of the warehouse    intersectsSouth = ((SW(Y) - yIntercept) / gradient) > SW(X);        intersectionWithWest = gradient * SW(X) + yIntercept;    intersectsWest = intersectionWithWest < NW(Y) && intersectionWithWest > SW(Y);  end    if intersectsSouth || intersectsWest        if foxPos(Y) > NW(Y) || gradient > 0 && foxPos(Y) > SW(Y)           foxTarget = NW;    else      foxTarget = SW;    end  end  end